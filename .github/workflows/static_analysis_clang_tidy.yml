name: Static Code Analysis

on:
  push:
    branches:
        - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  INEXOR_VULKAN_SDK_VERSION: "1.3.283.0"
  INEXOR_VULKAN_SDK_PATH: "${{ github.workspace }}/vulkan_sdk"

jobs:
  clang-tidy:
    name: Clang-Tidy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set build date
        run: echo "BUILD_DATE=$(date +'%d_%b_%Y_%H%M%S')" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt update -qq
          sudo apt-get install -y \
            gcc-14 \
            g++-14 \
            clang-18 \
            clang-tidy \
            cmake \
            curl \
            git \
            libgl1-mesa-dev \
            libwayland-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxkbcommon-dev \
            libxcb-dri3-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-sync-dev \
            libxcb-util-dev \
            libxcb-xfixes0-dev \
            libxcb-xinerama0-dev \
            libxcb-xkb-dev \
            lld \
            ninja-build \
            pkg-config \
            python3 \
            python3-pip \
            xkb-data \
            xorg-dev
          pip3 install --break-system-packages wheel setuptools

      - name: Load Vulkan SDK from Cache
        id: cache-vulkan-sdk
        uses: actions/cache@v4
        with:
          path: ${{ env.INEXOR_VULKAN_SDK_PATH }}
          key: vulkan-sdk-${{ env.INEXOR_VULKAN_SDK_VERSION }}-${{ runner.os }}

      - name: Download Vulkan SDK
        if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.INEXOR_VULKAN_SDK_PATH }}
          wget -O vulkansdk.tar.xz https://sdk.lunarg.com/sdk/download/${{ env.INEXOR_VULKAN_SDK_VERSION }}/linux/vulkan-sdk.tar.xz
          tar -xJf vulkansdk.tar.xz -C ${{ env.INEXOR_VULKAN_SDK_PATH }}

      - name: Load CMake Setup from Cache
        id: cache-cmake
        uses: actions/cache@v4
        with:
          path: build
          key: cmake-${{ runner.os }}-${{ matrix.config.compiler }}-${{ matrix.config.build_type }}-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt', '**/*.cmake') }}

      - name: Configure CMake
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: |
          rm -rf ${{ env.INEXOR_VULKAN_SDK_PATH }}/${{ env.INEXOR_VULKAN_SDK_VERSION }}/x86_64/lib/cmake/volk/
          export CC=${{ matrix.config.cc }}
          export CXX=${{ matrix.config.cxx }}
          export VULKAN_SDK="${{ env.INEXOR_VULKAN_SDK_PATH }}/${{ env.INEXOR_VULKAN_SDK_VERSION }}/x86_64"
          export PATH=$VULKAN_SDK/bin:$PATH
          export LD_LIBRARY_PATH=$VULKAN_SDK/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
          export VK_LAYER_PATH=$VULKAN_SDK/share/vulkan/explicit_layer.d
          cmake . \
            -Bbuild \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DVULKAN_SDK=$VULKAN_SDK \
            -DINEXOR_BUILD_BENCHMARKS=OFF \
            -DINEXOR_BUILD_TESTS=OFF \
            -DCMAKE_CXX_FLAGS="-Wall -Wextra" \
            -GNinja \
            ${{ matrix.config.cmake_configure_options }}

      - name: Check the files found for clang-tidy
        run: |
          find example src include \
            -path '*/_deps/*' -prune -o \
            -path '*/build/*' -prune -o \
            \( -name '*.cpp' -o -name '*.hpp' \) -print

      - name: Run clang-tidy
        run: |
          find example src include \
            -path '*/_deps/*' -prune -o \
            -path '*/build/*' -prune -o \
            \( -name '*.cpp' -o -name '*.hpp' \) -print0 |
            parallel -0 clang-tidy -p build {} |
            tee clang-tidy-output.txt || true

      - name: Summarize clang-tidy warnings
        run: |
          grep -hEo '\[[a-z0-9]+-[a-z0-9-]+\]' clang-tidy-output.txt \
            | sort | uniq -c | sort -nr \
            | sed 's/[][]//g' || true

      - name: Upload clang-tidy results
        uses: actions/upload-artifact@v4
        with:
          name: Nightly_${{ env.BUILD_DATE }}_clang-tidy_analysis
          path: clang-tidy-output.txt
