name: Build
on: [push, pull_request]

jobs:
  linux:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    container: ubuntu:rolling
    env:
      DEBIAN_FRONTEND: "noninteractive"
      CONAN_USER_HOME: "${{ github.workspace }}/conan/"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Clang",
            cc: "clang", cxx: "clang++",
            conan_profile: './conan/clang_release_profile',
            build_type: "Release",
          }
          - {
            name: "Ubuntu GCC",
            cc: "gcc", cxx: "g++",
            conan_profile: './conan/gcc_release_profile',
            build_type: "Release",
          }

    steps:
      - name: Update environment
        shell: bash
        run: |
          # Update package lists
          apt update -qq
          # Install build tools
          apt install -y \
            clang-14 \
            cmake \
            curl \
            git \
            libgl1-mesa-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxcb-dri3-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-sync-dev \
            libxcb-util-dev \
            libxcb-xfixes0-dev \
            libxcb-xinerama0-dev \
            libxcb-xkb-dev \
            lld \
            ninja-build \
            pkg-config \
            python3 \
            python3-pip \
            xkb-data \
            xorg-dev

          pip3 install wheel setuptools
          pip3 install conan mako

      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Conan Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: conan-${{ runner.os }}-${{ matrix.config.name }}-${{ matrix.config.build_type }}-${{ hashFiles('conanfile.py') }}

      - name: Configure Conan
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        shell: bash
        run: |
          conan install . -pr:h ${{ matrix.config.conan_profile }} -pr:b ${{ matrix.config.conan_profile }} --update --build=missing --output-folder build/

      - name: Configure CMake
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        shell: bash
        run: |
          cd build
          cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}

      - name: Build
        shell: bash
        run: |
          cmake --build .

      - name: Prepare build artifacts
        shell: bash
        run: |
          cd build
          tar -zcvf "../build_linux_${{ matrix.config.cc }}.tar.xz" *

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build_linux_${{ matrix.config.cc }}.tar.xz
          path: build_linux_${{ matrix.config.cc }}.tar.xz

      - name: Prepare release artifacts
        shell: bash
        run: |
          mkdir release
          cp -r ./build/bin/ release
          cp -r ./configuration/ release
          cp -r ./assets/ release
          mkdir -p ./release/shaders
          cp ./shaders/*.spv ./release/shaders/
          cd release
          tar -zcvf "../release_linux_amd64_${{ matrix.config.cc }}.tar.xz" *

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release_linux_amd64_${{ matrix.config.cc }}.tar.xz
          path: release_linux_amd64_${{ matrix.config.cc }}.tar.xz
          retention-days: 7

      - name: Clean Up Conan
        if: always()
        shell: bash
        run: |
          conan remove "*" -f --builds --src
          conan remove "*" -f --system-reqs

  windows:
    name: ${{ matrix.config.name }}
    runs-on: windows-latest
    env:
      CONAN_USER_HOME: "${{ github.workspace }}/conan/"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows MSVC",
            cc: "cl", cxx: "cl",
            compiler: "msvc",
            build_type: "Release",
            cmake_build_options: "--config Release",
            cmake_configure_options: '-G "Visual Studio 17 2022" -A x64',
            conan_profile_update: ''
          }
          - {
            name: "Windows Clang",
            cc: "clang-cl", cxx: "clang-cl",
            compiler: "clang",
            build_type: "Release",
            cmake_build_options: "--config Release",
            cmake_configure_options: '-G "Visual Studio 17 2022" -A x64 -T "LLVM_v143" -DCMAKE_CXX_COMPILER="clang-cl.exe" -DCMAKE_C_COMPILER="clang-cl.exe" -DCMAKE_LINKER="lld.exe"',
            conan_profile_update: 'conan profile update settings.compiler.libcxx=libstdc++11 default',
          }

    steps:
      - name: Update environment
        shell: pwsh
        run: |
          pip3 install wheel setuptools
          pip3 install conan

      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Conan Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: conan-${{ runner.os }}-${{ matrix.config.name }}-${{ matrix.config.build_type }}-${{ hashFiles('conanfile.py') }}

      - name: Configure LLVM
        if: matrix.config.compiler == 'clang'
        shell: pwsh
        run: |
          choco upgrade --no-progress llvm
          curl -fsSL -o "LLVM_VS2017.zip" "https://github.com/zufuliu/llvm-utils/releases/download/v22.09/LLVM_VS2017.zip"
          7z x -y "LLVM_VS2017.zip" >NUL
          LLVM_VS2017\install.bat
          conan config init
          (Get-Content "$(conan config home)\settings.yml") -replace 'v143', 'v143, LLVM_v143' | Out-File -encoding ASCII "$(conan config home)\settings.yml"

      - name: Configure CMake
        shell: pwsh
        run: |
          $env:CC="${{ matrix.config.cc }}"
          $env:CXX="${{ matrix.config.cxx }}"

          # Setup conan
          conan profile new default --detect --force
          ${{ matrix.config.conan_profile_update }}

          # Configure CMake
          cmake . `
            -Bbuild `
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} `
            ${{ matrix.config.cmake_configure_options }}

      - name: Build
        shell: pwsh
        run: |
          cmake --build build ${{ matrix.config.cmake_build_options }}

      - name: Prepare build artifacts
        shell: pwsh
        run: |
          7z a -tzip "build_windows_${{ matrix.config.compiler }}.zip" ./build/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build_windows_${{ matrix.config.compiler }}.zip
          path: build_windows_${{ matrix.config.compiler }}.zip

      - name: Prepare release artifacts
        shell: pwsh
        run: |
          mkdir release
          cp -r ./build/bin/. release
          cp -r ./configuration/. release
          cp -r ./assets/. release
          mkdir -P ./release/shaders
          cp ./shaders/*.spv ./release/shaders/
          7z a -tzip "release_windows_amd64_${{ matrix.config.compiler }}.zip" ./release/*

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release_windows_amd64_${{ matrix.config.compiler }}.zip
          path: release_windows_amd64_${{ matrix.config.compiler }}.zip
          retention-days: 7

      - name: Clean Up Conan
        if: always()
        shell: pwsh
        run: |
          conan remove "*" -f --builds --src
          conan remove "*" -f --system-reqs
