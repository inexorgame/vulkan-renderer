name: Build Code

on:
  push:
    branches:
        - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  INEXOR_VULKAN_SDK_VERSION: "1.3.283.0"
  INEXOR_VULKAN_SDK_PATH: "${{ github.workspace }}/vulkan_sdk"
  INEXOR_VULKAN_SDK_CHECKSUM_LINUX: "8005e2cf3e89c80cbe1c0d0a259c88248de3257b4fc6fdefb47409edb3e43ecb"
  INEXOR_VULKAN_SDK_CHECKSUM_WINDOWS: "811fcb9b43d09248520b2f38ae9a3763fc81df950fdab874f23bd762b07a9b12"

jobs:
  windows:
    name: ${{ matrix.config.name }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows MSVC (Debug)",
              compiler: "msvc",
              cc: "cl",
              cxx: "cl",
              cmake_configure_options: '-G "Visual Studio 17 2022" -A x64',
              build_type: "Debug",
              cmake_build_options: "--config Debug"
            }
          - {
              name: "Windows MSVC (Release)",
              compiler: "msvc",
              cc: "cl",
              cxx: "cl",
              cmake_configure_options: '-G "Visual Studio 17 2022" -A x64',
              build_type: "Release",
              cmake_build_options: "--config Release"
            }
          - {
              name: "Windows Clang (Debug)",
              compiler: "clang",
              cc: "clang-cl",
              cxx: "clang-cl",
              cmake_configure_options: '-G "Ninja" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_LINKER=lld-link',
              build_type: "Debug",
              cmake_build_options: "--config Debug"
            }
          - {
              name: "Windows Clang (Release)",
              compiler: "clang",
              cc: "clang-cl",
              cxx: "clang-cl",
              cmake_configure_options: '-G "Ninja" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_LINKER=lld-link',
              build_type: "Release",
              cmake_build_options: "--config Release"
            }

    steps:
      - name: Update environment
        run: pip3 install wheel setuptools

      - name: Checkout
        uses: actions/checkout@v4

      - name: Load Vulkan SDK from Cache
        id: cache-vulkan
        uses: actions/cache@v4
        with:
          path: ${{ env.INEXOR_VULKAN_SDK_PATH }}
          key: vulkansdk-windows-${{ env.INEXOR_VULKAN_SDK_VERSION }}

      - name: Download Vulkan SDK
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        run: |
          curl -LS -o vulkansdk.exe https://sdk.lunarg.com/sdk/download/${{ env.INEXOR_VULKAN_SDK_VERSION }}/windows/VulkanSDK-${{ env.INEXOR_VULKAN_SDK_VERSION }}-Installer.exe
          7z x -y vulkansdk.exe -o"${{ env.INEXOR_VULKAN_SDK_PATH }}"

      - name: Configure CMake
        run: |
          $env:CC="${{ matrix.config.cc }}"
          $env:CXX="${{ matrix.config.cxx }}"
          $env:Path += ";${{ env.INEXOR_VULKAN_SDK_PATH }}\;${{ env.INEXOR_VULKAN_SDK_PATH }}\Bin\"
          $env:VULKAN_SDK="${{ env.INEXOR_VULKAN_SDK_PATH }}"
          cmake . `
            -Bbuild `
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} `
            -DINEXOR_BUILD_BENCHMARKS=OFF `
            -DINEXOR_BUILD_TESTS=OFF `
            ${{ matrix.config.cmake_configure_options }}

      - name: Build
        run: cmake --build build ${{ matrix.config.cmake_build_options }}

      - name: Prepare Build Artifacts
        run: 7z a -tzip "build_windows_${{ matrix.config.build_type }}_${{ matrix.config.compiler }}" ./build/*

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build_windows_${{ matrix.config.build_type }}_${{ matrix.config.compiler }}
          path: build_windows_${{ matrix.config.build_type }}_${{ matrix.config.compiler }}.zip

      - name: Prepare Nightly Artifacts
        run: |
          mkdir artifacts
          # Copy executable: check flat path first (Clang/Ninja), otherwise use config subfolder (MSVC)
          if (Test-Path ./build/example/inexor-vulkan-renderer-example.exe) {
              cp ./build/example/inexor-vulkan-renderer-example.exe artifacts
          } else {
              cp ./build/example/${{ matrix.config.build_type }}/inexor-vulkan-renderer-example.exe artifacts
          }
          cp -r ./configuration/. artifacts
          cp -r ./assets/. artifacts
          mkdir -p ./artifacts/shaders
          cp ./shaders/*.spv ./artifacts/shaders/
          7z a -tzip "nightly_windows_${{ matrix.config.build_type }}_${{ matrix.config.compiler }}" ./artifacts/*


      - name: Upload Nightly Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nightly_windows_${{ matrix.config.build_type }}_${{ matrix.config.compiler }}
          path: nightly_windows_${{ matrix.config.build_type }}_${{ matrix.config.compiler }}.zip
          retention-days: 7
